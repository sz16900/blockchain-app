"use strict";

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _lodash = _interopRequireDefault(require("lodash"));

var _postcss = _interopRequireDefault(require("postcss"));

var _getModuleDependencies = _interopRequireDefault(require("./lib/getModuleDependencies"));

var _registerConfigAsDependency = _interopRequireDefault(require("./lib/registerConfigAsDependency"));

var _processTailwindFeatures = _interopRequireDefault(require("./processTailwindFeatures"));

var _formatCSS = _interopRequireDefault(require("./lib/formatCSS"));

var _resolveConfig = _interopRequireDefault(require("./util/resolveConfig"));

var _constants = require("./constants");

var _defaultConfigStub = _interopRequireDefault(require("../stubs/defaultConfig.stub.js"));

var _featureFlags = require("./featureFlags");

var _uniformColorPalette = _interopRequireDefault(require("./flagged/uniformColorPalette.js"));

var _extendedSpacingScale = _interopRequireDefault(require("./flagged/extendedSpacingScale.js"));

var _defaultLineHeights = _interopRequireDefault(require("./flagged/defaultLineHeights.js"));

var _extendedFontSizeScale = _interopRequireDefault(require("./flagged/extendedFontSizeScale.js"));

var _darkModeVariant = _interopRequireDefault(require("./flagged/darkModeVariant.js"));

var _standardFontWeights = _interopRequireDefault(require("./flagged/standardFontWeights"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getAllConfigs(config) {
  const configs = [_defaultConfigStub.default];

  if ((0, _featureFlags.flagEnabled)(config, 'uniformColorPalette')) {
    configs.unshift(_uniformColorPalette.default);
  }

  if ((0, _featureFlags.flagEnabled)(config, 'extendedSpacingScale')) {
    configs.unshift(_extendedSpacingScale.default);
  }

  if ((0, _featureFlags.flagEnabled)(config, 'defaultLineHeights')) {
    configs.unshift(_defaultLineHeights.default);
  }

  if ((0, _featureFlags.flagEnabled)(config, 'extendedFontSizeScale')) {
    configs.unshift(_extendedFontSizeScale.default);
  }

  if ((0, _featureFlags.flagEnabled)(config, 'standardFontWeights')) {
    configs.unshift(_standardFontWeights.default);
  }

  if ((0, _featureFlags.flagEnabled)(config, 'darkModeVariant')) {
    configs.unshift(_darkModeVariant.default);

    if (Array.isArray(config.plugins)) {
      config.plugins = [..._darkModeVariant.default.plugins, ...config.plugins];
    }
  }

  return [config, ...configs];
}

function resolveConfigPath(filePath) {
  // require('tailwindcss')({ theme: ..., variants: ... })
  if (_lodash.default.isObject(filePath) && !_lodash.default.has(filePath, 'config') && !_lodash.default.isEmpty(filePath)) {
    return undefined;
  } // require('tailwindcss')({ config: 'custom-config.js' })


  if (_lodash.default.isObject(filePath) && _lodash.default.has(filePath, 'config') && _lodash.default.isString(filePath.config)) {
    return _path.default.resolve(filePath.config);
  } // require('tailwindcss')({ config: { theme: ..., variants: ... } })


  if (_lodash.default.isObject(filePath) && _lodash.default.has(filePath, 'config') && _lodash.default.isObject(filePath.config)) {
    return undefined;
  } // require('tailwindcss')('custom-config.js')


  if (_lodash.default.isString(filePath)) {
    return _path.default.resolve(filePath);
  } // require('tailwindcss')


  try {
    const defaultConfigPath = _path.default.resolve(_constants.defaultConfigFile);

    _fs.default.accessSync(defaultConfigPath);

    return defaultConfigPath;
  } catch (err) {
    return undefined;
  }
}

const getConfigFunction = config => () => {
  if (_lodash.default.isUndefined(config) && !_lodash.default.isObject(config)) {
    return (0, _resolveConfig.default)([...getAllConfigs(_defaultConfigStub.default)]);
  } // Skip this if Jest is running: https://github.com/facebook/jest/pull/9841#issuecomment-621417584


  if (process.env.JEST_WORKER_ID === undefined) {
    if (!_lodash.default.isObject(config)) {
      (0, _getModuleDependencies.default)(config).forEach(mdl => {
        delete require.cache[require.resolve(mdl.file)];
      });
    }
  }

  const configObject = _lodash.default.isObject(config) ? _lodash.default.get(config, 'config', config) : require(config);
  return (0, _resolveConfig.default)([...getAllConfigs(configObject)]);
};

const plugin = _postcss.default.plugin('tailwind', config => {
  const plugins = [];
  const resolvedConfigPath = resolveConfigPath(config);

  if (!_lodash.default.isUndefined(resolvedConfigPath)) {
    plugins.push((0, _registerConfigAsDependency.default)(resolvedConfigPath));
  }

  return (0, _postcss.default)([...plugins, (0, _processTailwindFeatures.default)(getConfigFunction(resolvedConfigPath || config)), _formatCSS.default]);
});

module.exports = plugin;